#!/usr/bin/env perl

use strict;
use warnings;

use URI::Escape;
use Data::Dumper;
use Getopt::Long;

my $fasta   = '';
my $stats   = '';
my $len_bin = '';
my $gc_bin  = '';
my $limit   = 0;
my $no_char = 0;
my %iupac   = map {$_ => 1} qw(a c g t u r y k m s w b d h v n x -);

my $lens = {};
my $gc_content = {};
my $gc_ratio   = {};
my $ambig_char = 0;
my $ambig_seq  = 0;

my $count = 0;
my $len_total = 0;
my $gcc_total = 0;
my $gcr_total = 0;

my $ids = {};
my $eol_code = "%0A";
my $get_ids  = 0;
my $id_stats = { length_min    => 999999999999,
		 length_max    => 0,
		 id_length_min => '',
		 id_length_max => '' };

my $usage = qq($0
Calculate statistics for fasta files.

OUTPUT:
  bp_count
  sequence_count
  average_length
  standard_deviation_length
  length_min
  length_max
  average_gc_content
  standard_deviation_gc_content
  average_gc_ratio
  standard_deviation_gc_ratio
  ambig_char_count
  ambig_sequence_count
  average_ambig_chars
  id_length_min
  id_length_max

USAGE:
    --fasta_file      (string, required)   Fasta file to process
    --stat_file       (string)             File to place stat results (default to STDOUT)
    --length_bin      (string)             File to place length bins (default is no output)
    --percent_gc_bin  (string)             File to place % gc bins (default is no output)
    --length_only     (boolean)            Only calculate length stats (much faster)
    --id_stats        (boolean)            Calculate additional id stats
    --no_char_check   (boolean)            skip checking for invalid iupac characters
    --eol_code        (string)             URI-escaped eol character(s) for input file, (default is '%0A', '\\n')

);

if ( (@ARGV > 0) && ($ARGV[0] =~ /-h/) ) { print STDERR "ERROR: usage text\n$usage"; exit 1; }
if ( ! GetOptions ("fasta_file=s"     => \$fasta,
		   "stat_file:s"      => \$stats,
		   "length_bin:s"     => \$len_bin,
		   "percent_gc_bin:s" => \$gc_bin,
		   "length_only!"     => \$limit,
		   "id_stats!"        => \$get_ids,
		   "no_char_check!"   => \$no_char,
		   "eol_code:s"       => \$eol_code
		  )
   ) { print STDERR "ERROR: invalid argument usage\n$usage"; exit 1; }

unless ($fasta && (-s $fasta)) {
  print STDERR "ERROR: Please provide valid input file(s).\n$usage"; exit 1;
}

my $eol = $/;
$/      = uri_unescape($eol_code) . ">";

if ( open(FASTA, "<$fasta") ) {
  while (my $line = <FASTA>) {
    chomp $line;
    next unless ($line);

    my %chars = ();
    my @lines = split(/\n/, $line);
    my $head  = shift @lines;
    my $seq   = join("", @lines);
    $seq      =~ s/\s+//g;
    my $len   = length($seq);

    if (! $limit) {
      foreach my $ch (split(//, $seq)) {
	$ch = lc($ch);
	if (exists $iupac{$ch}) {
	  $chars{$ch} += 1;
	}
	elsif (! $no_char) {
	  print STDERR "ERROR:\tinvalid IUPAC character\t$ch\t" . uri_escape($ch) . "\n";
	  exit 1;
	}
      }
    }
    $count += 1;
    $len_total += $len;
    $lens->{$len} += 1;

    if (! $limit) {
      if ($get_ids) {
	if ($head =~ /^>?(\S+)(.*)$/) {
	  if (exists $ids->{$1}) {
	    print STDERR "ERROR:\tduplicate header id\t$1\n";
	    exit 1;
	  }
	  if ($len < $id_stats->{length_min}) {
	    $id_stats->{length_min}    = $len;
	    $id_stats->{id_length_min} = $1;
	  }
	  if ($len > $id_stats->{length_max}) {
	    $id_stats->{length_max}    = $len;
	    $id_stats->{id_length_max} = $1;
	  }
	  $ids->{$1} = 1;
	}
      }
      my $a     = $chars{a} || 0;
      my $t     = $chars{t} || 0;
      my $g     = $chars{g} || 0;
      my $c     = $chars{c} || 0;
      my $nuc   =  $a + $t + $g + $c;
      my $ambig = $len - $nuc;
      my $gc_c  = sprintf("%.1f", (($g + $c) / ($nuc || 1)) * 100);
      my $gc_r  = sprintf("%.1f", ($g + $c) ? ($a + $t) / ($g + $c) : 0);
      
      $gcc_total += $gc_c;
      $gcr_total += $gc_r;
      $gc_content->{$gc_c} += 1;
      $gc_ratio->{$gc_r} += 1;
      $ambig_char += $ambig;
      if ($ambig > 0) { $ambig_seq += 1; }
    }
  }
  close FASTA;
}
else {
  print STDERR "ERROR: Can not open file $fasta: $!";
  exit 1;
}
$/ = $eol;

## length stats
my ($len_mean, $len_stdev) = &get_mean_stdev($count, $len_total, $lens);
my @lengths = sort {$a <=> $b} keys %$lens;
my $min_len = $lengths[0];
my $max_len = $lengths[-1];

my @stat_text = ( "bp_count\t$len_total",
		  "sequence_count\t$count",
		  "average_length\t$len_mean",
		  "standard_deviation_length\t$len_stdev",
		  "length_min\t$min_len",
		  "length_max\t$max_len"
		);
## other stats
if (! $limit) {
  my ($gcc_mean, $gcc_stdev) = &get_mean_stdev($count, $gcc_total, $gc_content);
  my ($gcr_mean, $gcr_stdev) = &get_mean_stdev($count, $gcr_total, $gc_ratio);
  my $avg_ambig = sprintf( "%.3f", $ambig_char / $count );

  push @stat_text, ( "average_gc_content\t$gcc_mean",
		     "standard_deviation_gc_content\t$gcc_stdev",
		     "average_gc_ratio\t$gcr_mean",
		     "standard_deviation_gc_ratio\t$gcr_stdev",
		     "ambig_char_count\t$ambig_char",
		     "ambig_sequence_count\t$ambig_seq",
		     "average_ambig_chars\t$avg_ambig"
		   );
  if ($get_ids) {
    push @stat_text, ( "id_length_min\t" . $id_stats->{id_length_min},
		       "id_length_max\t" . $id_stats->{id_length_max}  );
  }
}

## outputs
if ($stats) {
  if ( open(STATS, ">$stats") ) {
    print STATS join("\n", @stat_text) . "\n";
  }
  else {
    print STDERR "ERROR: Can not open file $stats: $!";
    exit 1;
  }
}
else {
  print STDOUT join("\n", @stat_text) . "\n";
}
if ($len_bin) {
  &output_bins($lens, $len_bin);
}
if ($gc_bin && (! $limit)) {
  &output_bins($gc_content, $gc_bin);
}

sub get_mean_stdev {
  my ($count, $total, $data) = @_;
  
  my $mean = $total / $count;
  my $sum  = 0;

  foreach my $d (keys %$data) {
    for (my $i = 0; $i < $data->{$d}; $i++) {
      my $dev = $d - $mean;
      $sum += ($dev * $dev);
    }
  }
  $mean     = sprintf( "%.3f", $mean );
  my $stdev = sprintf( "%.3f", sqrt($sum / $count) );

  return ($mean, $stdev);
}

sub output_bins {
  my ($data, $file) = @_;

  if ( open(OUTBIN, ">$file") ) {
    foreach my $num (sort {$a <=> $b} keys %$data) {
      print OUTBIN "$num\t" . $data->{$num} . "\n";
    }
  }
  else {
    print STDERR "ERROR: Can not open file $file: $!";
    exit 1;
  }
}
